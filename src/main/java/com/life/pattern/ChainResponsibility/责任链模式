责任链模式顾名思义就是不同的职责节点处理不同的场景，各个场景按照某种规则连接在一起。
场景：批假流程，参与人包括组长、经理、总监，组长的职责范围是2天以内，经理是4天以内，总监是7天以内

一般做法：if/else，当节点很多比如说几十个、每个节点处理的业务场景很复杂，需要大量的代码去实现，是不是就会显得第一代码不易阅读，不易维护
主要逻辑就在一个类上违反了“单一职责原则”；如果节点需要改业务场景，比如组长的权限变大了，是4天了，需要修改这个类的源代码违反了“开闭原则”

所以需要利用设计模式---责任链设计模式---对象行为型模式

应用场景:
Netty 中的 Pipeline 和 ChannelHandler 通过责任链设计模式来组织代码逻辑
Spring Security 使用责任链模式，可以动态地添加或删除责任（处理 request 请求）
Spring AOP 通过责任链模式来管理 Advisor
Dubbo Filter 过滤器链也是用了责任链模式（链表），可以对方法调用做一些过滤处理，譬如超时(TimeoutFilter)，异常(ExceptionFilter)，Token(TokenFilter)等
Mybatis 中的 Plugin 机制使用了责任链模式，配置各种官方或者自定义的 Plugin，与 Filter 类似，可以在执行 Sql 语句的时候做一些操作


https://juejin.im/post/5bd95adfe51d45607e02ecc0